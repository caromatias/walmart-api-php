<?php

/**
 * OrderLine
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Order Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\CL\Orders;

use Walmart\Models\BaseModel;

/**
 * OrderLine Class Doc Comment
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class OrderLine extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'OrderLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'lineNumber' => 'string',
        'item' => '\Walmart\Models\MP\CL\Orders\Item',
        'charges' => '\Walmart\Models\MP\CL\Orders\Charges',
        'orderLineQuantity' => '\Walmart\Models\MP\CL\Orders\OrderLineQuantity',
        'statusDate' => 'int',
        'orderLineStatuses' => '\Walmart\Models\MP\CL\Orders\OrderLineStatuses',
        'refund' => '\Walmart\Models\MP\CL\Orders\Refund',
        'fulfillment' => '\Walmart\Models\MP\CL\Orders\Fulfillment'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'lineNumber' => null,
        'item' => null,
        'charges' => null,
        'orderLineQuantity' => null,
        'statusDate' => 'int64',
        'orderLineStatuses' => null,
        'refund' => null,
        'fulfillment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lineNumber' => false,
        'item' => false,
        'charges' => false,
        'orderLineQuantity' => false,
        'statusDate' => false,
        'orderLineStatuses' => false,
        'refund' => true,
        'fulfillment' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'lineNumber' => 'lineNumber',
        'item' => 'item',
        'charges' => 'charges',
        'orderLineQuantity' => 'orderLineQuantity',
        'statusDate' => 'statusDate',
        'orderLineStatuses' => 'orderLineStatuses',
        'refund' => 'refund',
        'fulfillment' => 'fulfillment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'lineNumber' => 'setLineNumber',
        'item' => 'setItem',
        'charges' => 'setCharges',
        'orderLineQuantity' => 'setOrderLineQuantity',
        'statusDate' => 'setStatusDate',
        'orderLineStatuses' => 'setOrderLineStatuses',
        'refund' => 'setRefund',
        'fulfillment' => 'setFulfillment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'lineNumber' => 'getLineNumber',
        'item' => 'getItem',
        'charges' => 'getCharges',
        'orderLineQuantity' => 'getOrderLineQuantity',
        'statusDate' => 'getStatusDate',
        'orderLineStatuses' => 'getOrderLineStatuses',
        'refund' => 'getRefund',
        'fulfillment' => 'getFulfillment'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('lineNumber', $data ?? [], null);
        $this->setIfExists('item', $data ?? [], null);
        $this->setIfExists('charges', $data ?? [], null);
        $this->setIfExists('orderLineQuantity', $data ?? [], null);
        $this->setIfExists('statusDate', $data ?? [], null);
        $this->setIfExists('orderLineStatuses', $data ?? [], null);
        $this->setIfExists('refund', $data ?? [], null);
        $this->setIfExists('fulfillment', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        return $invalidProperties;
    }

    /**
     * Gets lineNumber
     *
     * @return string
     */
    public function getLineNumber()
    {
        return $this->container['lineNumber'];
    }

    /**
     * Sets lineNumber
     *
     * @param string $lineNumber lineNumber
     *
     * @return self
     */
    public function setLineNumber($lineNumber)
    {
        if (is_null($lineNumber)) {
            throw new \InvalidArgumentException('non-nullable lineNumber cannot be null');
        }
        $this->container['lineNumber'] = $lineNumber;
        return $this;
    }

    /**
     * Gets item
     *
     * @return \Walmart\Models\MP\CL\Orders\Item
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \Walmart\Models\MP\CL\Orders\Item $item item
     *
     * @return self
     */
    public function setItem($item)
    {
        if (is_null($item)) {
            throw new \InvalidArgumentException('non-nullable item cannot be null');
        }
        $this->container['item'] = $item;
        return $this;
    }

    /**
     * Gets charges
     *
     * @return \Walmart\Models\MP\CL\Orders\Charges
     */
    public function getCharges()
    {
        return $this->container['charges'];
    }

    /**
     * Sets charges
     *
     * @param \Walmart\Models\MP\CL\Orders\Charges $charges charges
     *
     * @return self
     */
    public function setCharges($charges)
    {
        if (is_null($charges)) {
            throw new \InvalidArgumentException('non-nullable charges cannot be null');
        }
        $this->container['charges'] = $charges;
        return $this;
    }

    /**
     * Gets orderLineQuantity
     *
     * @return \Walmart\Models\MP\CL\Orders\OrderLineQuantity
     */
    public function getOrderLineQuantity()
    {
        return $this->container['orderLineQuantity'];
    }

    /**
     * Sets orderLineQuantity
     *
     * @param \Walmart\Models\MP\CL\Orders\OrderLineQuantity $orderLineQuantity orderLineQuantity
     *
     * @return self
     */
    public function setOrderLineQuantity($orderLineQuantity)
    {
        if (is_null($orderLineQuantity)) {
            throw new \InvalidArgumentException('non-nullable orderLineQuantity cannot be null');
        }
        $this->container['orderLineQuantity'] = $orderLineQuantity;
        return $this;
    }

    /**
     * Gets statusDate
     *
     * @return int
     */
    public function getStatusDate()
    {
        return $this->container['statusDate'];
    }

    /**
     * Sets statusDate
     *
     * @param int $statusDate statusDate
     *
     * @return self
     */
    public function setStatusDate($statusDate)
    {
        if (is_null($statusDate)) {
            throw new \InvalidArgumentException('non-nullable statusDate cannot be null');
        }
        $this->container['statusDate'] = $statusDate;
        return $this;
    }

    /**
     * Gets orderLineStatuses
     *
     * @return \Walmart\Models\MP\CL\Orders\OrderLineStatuses
     */
    public function getOrderLineStatuses()
    {
        return $this->container['orderLineStatuses'];
    }

    /**
     * Sets orderLineStatuses
     *
     * @param \Walmart\Models\MP\CL\Orders\OrderLineStatuses $orderLineStatuses orderLineStatuses
     *
     * @return self
     */
    public function setOrderLineStatuses($orderLineStatuses)
    {
        if (is_null($orderLineStatuses)) {
            throw new \InvalidArgumentException('non-nullable orderLineStatuses cannot be null');
        }
        $this->container['orderLineStatuses'] = $orderLineStatuses;
        return $this;
    }

    /**
     * Gets refund
     *
     * @return \Walmart\Models\MP\CL\Orders\Refund
     */
    public function getRefund()
    {
        return $this->container['refund'];
    }

    /**
     * Sets refund
     *
     * @param \Walmart\Models\MP\CL\Orders\Refund $refund refund
     *
     * @return self
     */
    public function setRefund($refund)
    {
        if (is_null($refund)) {
            // Permitimos null para refund
            $this->container['refund'] = null;
            return $this;
        }
        $this->container['refund'] = $refund;
        return $this;
    }

    /**
     * Gets fulfillment
     *
     * @return \Walmart\Models\MP\CL\Orders\Fulfillment
     */
    public function getFulfillment()
    {
        return $this->container['fulfillment'];
    }

    /**
     * Sets fulfillment
     *
     * @param \Walmart\Models\MP\CL\Orders\Fulfillment $fulfillment fulfillment
     *
     * @return self
     */
    public function setFulfillment($fulfillment)
    {
        if (is_null($fulfillment)) {
            throw new \InvalidArgumentException('non-nullable fulfillment cannot be null');
        }
        $this->container['fulfillment'] = $fulfillment;
        return $this;
    }
}
